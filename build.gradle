plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.10'
    id 'org.springframework.boot' version '2.3.3.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'com.moowork.node' version '1.3.1'
    id 'com.palantir.docker' version '0.25.0'
}

group 'com.jooones'
version 'latest'

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation(
            'org.assertj:assertj-core:3.12.2',
            'org.junit.jupiter:junit-jupiter-api:5.4.2'
    )
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.4.2')
}

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

node {
    nodeModulesDir = file('front-end')
}

task buildAngular(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'build'
    description = 'Compile angular'
    args = ['run', 'build:prod']
}
processResources.dependsOn(buildAngular)

bootJar {
    baseName = "${rootProject.name}"
}

docker {
    name "${project.group}/${projectName}:${version}"
    dockerfile file('src/main/docker/Dockerfile')
    files "${project.buildDir}/libs"
    buildArgs([SPRING_BOOT_JAR_NAME: "${projectName}-${version}.jar"])
}
tasks.docker.dependsOn build

task removeDocker(type: Exec) {
    group = 'application'
    description = 'stop the docker app'
    ignoreExitValue true // continues after error but still shows task as failed
    errorOutput = new ByteArrayOutputStream() // catch error output so task is not shown as failed
    commandLine 'docker', 'rm', '-f', 'release-deploy-calendar'
}

task runDocker(type: Exec) {
    group = 'application'
    description = 'run the app via docker'
    commandLine 'docker', 'run', '--publish', '8080:8080', '--name', 'release-deploy-calendar', '-itd', 'com.jooones/release-deploy-calendar:latest'
}
runDocker.dependsOn removeDocker
runDocker.mustRunAfter tasks.docker

task buildAndRunDocker {
    group = 'application'
}
buildAndRunDocker.dependsOn tasks.docker, runDocker
